#!/usr/bin/perl
# Play the data on STDIN as an audio file
#
# $Id: gutenbach-filter,v 1.26 2009/02/20 00:27:17 geofft Exp root $
# $Source: /usr/local/bin/RCS/gutenbach-filter,v $
#
# TODO
# ----
# Make this structured code. It's a mess.
# Repeat what we just played for EXT files too
# Support HTTP Auth on ogg streams
# License, cleanup and package
#
# Jered Floyd <jered@mit.edu> takes very little credit for this code
# apparently neither does Quentin Smith <quentin@mit.edu>

use strict;
use warnings;
use Image::ExifTool qw(ImageInfo);
use File::Spec::Functions;
use File::Temp qw{tempfile tempdir};
use File::Basename qw(basename);
use LWP::UserAgent;
use Data::Dumper;
use IPC::Open2;
use English;
use Scalar::Util qw(looks_like_number);

use vars qw/$zephyr_class $host $queue $mixer $channel $http_password/;

# the first config file assigns values to the first five variables above;
# the second config file assigns a value to the last variable.
require "/usr/lib/gutenbach/config/gutenbach-filter-config.pl" or die "Unable to load configuration";
require "/usr/lib/gutenbach/config/gutenbach-http-password.pl" or die "Unable to load http password";

my $COPIES_SENTINEL = 42;
my @start_synonyms = qw(start from begin f b);
my @stop_synonyms = qw(stop end to til until e t);
# for sketchy regex interpolation later:
my $start_ors = join '|', @start_synonyms;
my $stop_ors  = join '|', @stop_synonyms;

my $ua = new LWP::UserAgent;

# This variable contains the pid of the child process (which runs
# vlc) once it has been forked, so that we can kill it on SIGTERM
my $pid;

# Replace STDERR with a log file in /tmp.
open(CUPS, ">&STDERR") or die "Unable to copy CUPS filehandle";
close(STDERR);
open(STDERR, ">>", "/tmp/gutenbach.log") or warn "Couldn't open log: $!";

print STDERR "STDERR FROM SPOOL FILTER\n";

# CUPS provides us with these arguments:
#
# argv[1]
# The job ID
# argv[2]
# The user printing the job
# argv[3]
# The job name/title
# argv[4]
# The number of copies to print
# argv[5]
# The options that were provided when the job was submitted
# argv[6]
# The file to print (first program only)
#
# The scheduler runs one or more of these programs to print any given
# job. The first filter reads from the print file and writes to the
# standard output, while the remaining filters read from the standard
# input and write to the standard output. The backend is the last
# filter in the chain and writes to the device.

printf(STDERR "Got \@ARGV: %s\n", Dumper(\@ARGV));

my %arguments = (
		 "job-id" => $ARGV[0],
		 user => $ARGV[1],
		 "job-title" => $ARGV[2],
		 copies => $ARGV[3],
		 options => {split(/[= ]/, $ARGV[4])},
		 file => $ARGV[5],
		);

# If we weren't given a filename, we need to read from stdin. Since
# mplayer really wants a file, let's write out to a temporary file
# first.
if (!$arguments{"file"}) {
  my ($fh, $file) = tempfile("gutenbachXXXXX", TMPDIR => 1, UNLINK => 1); # Ask File::Temp for a safe temporary file
  my $buf;
  while (read(STDIN, $buf, 1024*1024)) { # Read 1M at a time and put it in the temporary file
    print $fh $buf;
  }
  close($fh);
  $arguments{"file"} = $file;
}

printf(STDERR "Got %%arguments: %s\n", Dumper(\%arguments));

# Open up a zwrite command to announce the current track.
my @zwrite_command = (qw(/usr/bin/zwrite -d -n -c), $zephyr_class, "-i", $queue.'@'.$host, "-s", "Gutenbach Music Spooler");

print STDERR "Invoking @zwrite_command\n";
open(ZEPHYR, "|-", @zwrite_command) or die "Couldn't launch zwrite: $!";

my $status;
my $user = $arguments{"user"};
my $userdesc;
if (exists($arguments{"options"}{"job-originating-host-name"})) {
  my $ohost = $arguments{"options"}{"job-originating-host-name"};
  $userdesc = "$user\@$ohost";
} else {
  $userdesc = $user;
}
print ZEPHYR "$userdesc is playing:\n";
$status = "User: $userdesc";

# SIGHUP handler, in case we were aborted
sub clear_status {
  kill 15, $pid if $pid;
  my @zwrite_command = (qw(/usr/bin/zwrite -d -n -c), $zephyr_class, "-i", $queue.'@'.$host, "-s", "Gutenbach Music Spooler");
  open(ZEPH, "|-", @zwrite_command);
  print(ZEPH "Playback aborted.\n");
  close(ZEPH);

  open(STATUS, ">", "/var/run/gutenbach/status");
  print(STATUS "");
  close(STATUS);
  die;
}

$SIG{HUP} = \&clear_status;
$SIG{TERM} = \&clear_status;
$SIG{INT} = \&clear_status;

# Read the metadata information from the file.
my ($filepath) = $arguments{"file"};
my ($fileinfo) = ImageInfo($filepath);
my ($magic) = $fileinfo->{FileType};
my ($tempdir);
my ($newpath);
my ($title);

open(STATUS, ">", "/var/run/gutenbach/status");

my $do_playlist = defined($arguments{'options'}{'playlist'});

if ($magic) {
  # $magic means that Image::ExifTool was able to identify the type of file
  my $job_title = $arguments{"job-title"};
  print ZEPHYR "$magic file $job_title\n";
  $status .= " Filetype: $magic.";
  $status .= " Filename: $arguments{'job-title'}.";
  if (exists $fileinfo->{'Title'}) {
    $title = $fileinfo->{'Title'};
    print ZEPHYR "\@b{$title}\n";
    print STATUS "$title\n";
    $status .= " Title: $title.";
  }
  foreach my $key (qw/Artist Album AlbumArtist/) {
    if (exists $fileinfo->{$key}) {
      my $val = $fileinfo->{$key};
      print ZEPHYR "$val\n";
      print STATUS "$val\n";
      $status .= " $key: $val\n";
    }
  }

  $tempdir = tempdir();
  #awful hack -- geofft
  #== -- quentin
  # this comment is probably inaccurate because we don't even use mplayer
  # any more but idk -- bpchen

  # This code appears to create a new temporary directory and symlink
  # the job file into the temporary directory under the original
  # filename. I think this is because mplayer sometimes uses the file
  # extension to identify a filetype.
  $newpath = $tempdir . '/' . basename($arguments{"job-title"});
  symlink($filepath, $newpath);
  $filepath = $newpath;
}
elsif ($arguments{copies} == $COPIES_SENTINEL) {
  # This is a flag that is set by jobs queued by split_playlist(); it tells us to not try to split the playlist again.
  $filepath = get_url($filepath);
  if ($do_playlist) {
    my @json_args = ("-j", "--flat-playlist");
    if (defined($arguments{'options'}{'playlist-start'})) {
      push @json_args, '--playlist-start', $arguments{'options'}{'playlist-start'};
    }
    if (defined($arguments{'options'}{'playlist-end'})) {
      push @json_args, '--playlist-end', $arguments{'options'}{'playlist-end'};
    }
    $pid = open(YTDL_JSONS, "-|", "/usr/bin/python3", "/usr/local/bin/youtube-dl", @json_args, $filepath) or die "Unable to invoke youtube-dl";
    print ZEPHYR "YouTube playlist $filepath\n";
    $status .= " YouTube playlist $filepath.";
    while (<YTDL_JSONS>) {
      # this is the wrong way to get these IDs, but I can't find a right way
      # that doesn't involve parsing JSON, which seems like too heavyweight a
      # dependency (--get-id doesn't work??) --bpchen
      m/"id": "([-0-9a-zA-Z_]+)"/;
      print ZEPHYR "  enqueueing YouTube video /watch?v=$1\n";
      enqueue_url("https://www.youtube.com/watch?v=$1");
    }
  } else {
    # Launch youtube-dl, first just to get the title...
    $pid = open(YTDL_TITLE, "-|", "/usr/bin/python3", "/usr/local/bin/youtube-dl", "--no-playlist", "--get-title", $filepath) or die "Unable to invoke youtube-dl get-title";
    $title = <YTDL_TITLE>;
    close(YTDL_TITLE);
    die "youtube-dl get-title returned nonzero exit code" if $?;
    chomp $title;

    # ...then to get the URL.
    $pid = open(YTDL, "-|", "/usr/bin/python3", "/usr/local/bin/youtube-dl", "--format", "bestaudio/best", "--no-playlist", "--get-url", $filepath) or die "Unable to invoke youtube-dl get-url";
    print ZEPHYR "URL $filepath\n$title";
    $status .= " URL $filepath. $title.";

    # Finally, pass the URL to vlc as a filename.
    $filepath = <YTDL>;
    close(YTDL);
    die "youtube-dl get-url returned nonzero exit code" if $?;
    chomp $filepath;
  }
}
elsif (-T $filepath) { # If the file appears to be a text file, treat it as a playlist.
  split_playlist($filepath, \%arguments);
  close(ZEPHYR);
  # See http://www.cups.org/documentation.php/api-filter.html#MESSAGES
  print CUPS "NOTICE: $status\n";
  exit 0;
}

my $start = extract_time_option('Start', @start_synonyms);
my $stop  = extract_time_option('Stop' , @stop_synonyms );

close(ZEPHYR);
close(STATUS);
print CUPS "NOTICE: $status\n";
play_audio($filepath, \%arguments);

# Remove the symlink we made earlier for the filetype.
if ($magic) {
  unlink($newpath);
  rmdir($tempdir);
}

# -=-=-=-=-= subroutines start below =-=-=-=-=-

sub extract_time_option {
  my $label = shift;
  foreach (@_) {
    if (defined($arguments{'options'}{$_})) {
      my $res = parse_time_interval($arguments{'options'}{$_});
      print ZEPHYR "\n$label time: ${res} seconds";
      return $res;
    }
  }
  return undef;
}

# Tries to get url from first line of file
sub get_url {
  my $filepath = shift;

  open(FILE, "<", $filepath) or die "Couldn't open spool file";
  if (<FILE> =~ /^(\S+)/) {
    # Return the leading non-whitespace as a URL
    return $1;
  } else { # Unable to match the URL regex
    print ZEPHYR "Couldn't find URL in spool file\n";
    # Return the existing path, in the hopes that vlc knows what to do with it.
    return $filepath;
  }
}

sub enqueue_url {
  my ($url, $start_time, $stop_time, $do_playlist, $playlist_start, $playlist_end) = @_;
  $ENV{CUPS_SERVER}='localhost';
  my @lpargs = ('-d', "$queue", "-n", "$COPIES_SENTINEL");
  if (defined($start_time )) { push @lpargs, '-o', "start=$start_time"; }
  if (defined($stop_time  )) { push @lpargs, '-o', "stop=$stop_time"  ; }
  if (defined($do_playlist)) { push @lpargs, '-o', "playlist=1"       ; }
  if (defined($playlist_start)) { push @lpargs, '-o', "playlist-start=$playlist_start"; }
  if (defined($playlist_end))   { push @lpargs, '-o', "playlist-end=$playlist_end"    ; }

  open(LP, '|-', 'lp', @lpargs);
  print LP $url;
  close(LP);
}

sub process_playlist_line {
  my ($line, $url, $start_time, $stop_time, $do_playlist, $playlist_start, $playlist_end) = @_;
  print STDERR "Found playlist line: $line\n";
  enqueue_url($url, $start_time, $stop_time, $do_playlist, $playlist_start, $playlist_end);
}

sub split_playlist {
  my ($file, $arguments) = @_;

  my $i = 0;

  open(FILE, "<", $filepath) or die "Couldn't open spool file";
  while (<FILE>) {
    chomp;
    # first attempt to notice and parse special YouTube URL parameters
    if (/^([^#]+)#t=(\d+)/) {
      # url#t=123
      process_playlist_line($_, $1, $2);
      $i++;
    } elsif (/^([^#?&]+)\?(?:start|t)=(\d+)(?:&end=(\d+))?/) {
      # url?t=17 url?start=17 url?start=40&end=123
      process_playlist_line($_, $1, $2, $3);
      $i++;
    } elsif (/^([^#]\S+)(?:\s+playlist)(?:\s+(?:$start_ors)=(\S+))?(?:\s+(?:$stop_ors)=(\S+))?/) {
      process_playlist_line($_, $1, undef, undef, 1, $2, $3);
      $i++;
    } elsif (/^([^#]\S+)(?:\s+(?:$start_ors)=(\S+))?(?:\s+(?:$stop_ors)=(\S+))?/) {
      # our syntax, space-separated and stuff
      process_playlist_line($_, $1, $2, $3);
      $i++;
    }
  }
  printf(ZEPHYR "Playlist containing %d valid entries, split into separate jobs.\n", $i);
}

sub play_audio {
  my ($filepath, $opts) = @_;

  # Open up a zwrite command to show the vlc output
  my @zwrite_command = (qw(/usr/bin/zwrite -d -n -c), $zephyr_class, "-i", $queue.'@'.$host, "-s", "Gutenbach Music Spooler");

  print STDERR "Invoking (from play_audio): @zwrite_command\n";

  # fork for vlc
  $pid = open(MP3STATUS, "-|");
  unless (defined $pid) {
    open(ZEPHYR, "|-", @zwrite_command) or die "Couldn't launch zwrite: $!";
    print ZEPHYR "Couldn't fork: $!\n";
    close(ZEPHYR);
    return;
  }

  if ($pid) { #parent
    # Check if there were any errors
    if ($_ = do {local $/; <MP3STATUS>}) {
      open(ZEPHYR, "|-", @zwrite_command) or die "Couldn't launch zwrite: $!";
      print ZEPHYR "Playback completed with the following errors:\n";
      print ZEPHYR $_;
      close(ZEPHYR);
    } else {
      open(ZEPHYR, "|-", @zwrite_command) or die "Couldn't launch zwrite: $!";
      print ZEPHYR "Playback completed successfully.\n";
      close(ZEPHYR);
      open(STATUS, ">", "/var/run/gutenbach/status");
      print(STATUS "");
      close(STATUS);
    }
    close(MP3STATUS) || print ZEPHYR "vlc exited $?\n";
  }
  else { # child
    # redirect STDERR to STDOUT
    open STDERR, '>&STDOUT';
    # make sure that vlc doesn't try to intepret the file as keyboard input?
    close(STDIN);
    open(STDIN, "/dev/null");

    my @args = (qw{/usr/bin/vlc --quiet --play-and-exit --http-reconnect -I http --http-password}, $http_password, qw{--aout alsa --alsa-audio-device hw --no-video}, $filepath);
    if (defined($start)) { push @args, '--start-time', $start; }
    if (defined($stop )) { push @args, '--stop-time' , $stop ; }

    # print STDERR "About to exec: ", Dumper([@args]);
    exec(@args) ||
      die "Couldn't exec";
  }
}

sub parse_time_interval {
  my $arg = shift;
  # matches things like 4:33, 4m33, 4m33s, 4m
  if ($arg =~ /^(\d+)[m:](?:(\d+)s?)?$/i) {
    return $1 * 60 + ($2 or 0);
  } elsif (looks_like_number($arg)) {
    return 0 + $arg;
  } else {
    return undef;
  }
}
# vim:set et ts=2 sw=2 sts=2:
